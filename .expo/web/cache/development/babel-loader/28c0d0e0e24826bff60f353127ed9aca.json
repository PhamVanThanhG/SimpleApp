{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport AppLoading from \"expo-app-loading\";\nimport * as Font from \"expo-font\";\nimport { FONTS } from \"./app/constants/theme\";\nimport MainContainer from \"./app/screens/MainContainer\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      fontsLoaded = _useState2[0],\n      isFontsLoaded = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      appIsReady = _useState4[0],\n      setAppIsReady = _useState4[1];\n\n  function loadFonts() {\n    return _regeneratorRuntime.async(function loadFonts$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Font.loadAsync({\n              \"Poppins-Black\": require(\"./assets/fonts/Poppins-Black.ttf\"),\n              \"Poppins-BlackItalic\": require(\"./assets/fonts/Poppins-BlackItalic.ttf\"),\n              \"Poppins-Bold\": require(\"./assets/fonts/Poppins-Bold.ttf\"),\n              \"Poppins-BoldItalic\": require(\"./assets/fonts/Poppins-BoldItalic.ttf\"),\n              \"Poppins-ExtraBold\": require(\"./assets/fonts/Poppins-ExtraBold.ttf\"),\n              \"Poppins-ExtraBoldItalic\": require(\"./assets/fonts/Poppins-ExtraBoldItalic.ttf\"),\n              \"Poppins-ExtraLight\": require(\"./assets/fonts/Poppins-ExtraLight.ttf\"),\n              \"Poppins-ExtraLightItalic\": require(\"./assets/fonts/Poppins-ExtraLightItalic.ttf\"),\n              \"Poppins-Italic\": require(\"./assets/fonts/Poppins-Italic.ttf\"),\n              \"Poppins-Medium\": require(\"./assets/fonts/Poppins-Medium.ttf\"),\n              \"Poppins-MediumItalic\": require(\"./assets/fonts/Poppins-MediumItalic.ttf\"),\n              \"Poppins-Regular\": require(\"./assets/fonts/Poppins-Regular.ttf\"),\n              \"Poppins-SemiBold\": require(\"./assets/fonts/Poppins-SemiBold.ttf\"),\n              \"Poppins-SemiBoldItalic\": require(\"./assets/fonts/Poppins-SemiBoldItalic.ttf\")\n            }));\n\n          case 2:\n            isFontsLoaded(true);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function prepare() {\n    return _regeneratorRuntime.async(function prepare$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(SplashScreen.preventAutoHideAsync());\n\n          case 3:\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(new Promise(function (resolve) {\n              return setTimeout(resolve, 2000);\n            }));\n\n          case 5:\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.warn(_context2.t0);\n\n          case 10:\n            _context2.prev = 10;\n            setAppIsReady(true);\n            return _context2.finish(10);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7, 10, 13]], Promise);\n  }\n\n  useEffect(function () {\n    loadFonts();\n    prepare();\n  }, []);\n  var onLayoutRootView = useCallback(function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!appIsReady) {\n              _context3.next = 3;\n              break;\n            }\n\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(SplashScreen.hideAsync());\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [appIsReady]);\n\n  if (!fontsLoaded || !appIsReady) {\n    return _jsx(AppLoading, {});\n  }\n\n  return _jsx(MainContainer, {});\n}","map":{"version":3,"sources":["D:/The_Complete_React_Native_Hooks_Course/LTDD3_Nhom1_SimpleApp/App.js"],"names":["React","useCallback","useEffect","useState","NavigationContainer","createStackNavigator","createBottomTabNavigator","AppLoading","Font","FONTS","MainContainer","SplashScreen","App","fontsLoaded","isFontsLoaded","appIsReady","setAppIsReady","loadFonts","loadAsync","require","prepare","preventAutoHideAsync","Promise","resolve","setTimeout","console","warn","onLayoutRootView","hideAsync"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;;;;;;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,SAASC,wBAAT,QAAyC,+BAAzC;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,KAAT;AACA,OAAOC,aAAP;AACA,OAAO,KAAKC,YAAZ,MAA8B,oBAA9B;;AAEA,eAAe,SAASC,GAAT,GAAe;AAC5B,kBAAmCT,QAAQ,CAAC,KAAD,CAA3C;AAAA;AAAA,MAAKU,WAAL;AAAA,MAAkBC,aAAlB;;AACA,mBAAoCX,QAAQ,CAAC,KAAD,CAA5C;AAAA;AAAA,MAAOY,UAAP;AAAA,MAAmBC,aAAnB;;AAEA,WAAeC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACQT,IAAI,CAACU,SAAL,CAAe;AACnB,+BAAiBC,OAAO,oCADL;AAEnB,qCAAuBA,OAAO,0CAFX;AAGnB,8BAAgBA,OAAO,mCAHJ;AAInB,oCAAsBA,OAAO,yCAJV;AAKnB,mCAAqBA,OAAO,wCALT;AAMnB,yCAA2BA,OAAO,8CANf;AAOnB,oCAAsBA,OAAO,yCAPV;AAQnB,0CAA4BA,OAAO,+CARhB;AASnB,gCAAkBA,OAAO,qCATN;AAUnB,gCAAkBA,OAAO,qCAVN;AAWnB,sCAAwBA,OAAO,2CAXZ;AAYnB,iCAAmBA,OAAO,sCAZP;AAanB,kCAAoBA,OAAO,uCAbR;AAcnB,wCAA0BA,OAAO;AAdd,aAAf,CADR;;AAAA;AAiBEL,YAAAA,aAAa,CAAC,IAAD,CAAb;;AAjBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,WAAeM,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAGUT,YAAY,CAACU,oBAAb,EAHV;;AAAA;AAAA;AAAA,6CAOU,IAAIC,OAAJ,CAAY,UAACC,OAAD;AAAA,qBAAaC,UAAU,CAACD,OAAD,EAAU,IAAV,CAAvB;AAAA,aAAZ,CAPV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AASIE,YAAAA,OAAO,CAACC,IAAR;;AATJ;AAAA;AAYIV,YAAAA,aAAa,CAAC,IAAD,CAAb;AAZJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeAd,EAAAA,SAAS,CAAC,YAAM;AACde,IAAAA,SAAS;AACTG,IAAAA,OAAO;AACR,GAHQ,EAGN,EAHM,CAAT;AAKA,MAAMO,gBAAgB,GAAG1B,WAAW,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,iBAC/Bc,UAD+B;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAO3BJ,YAAY,CAACiB,SAAb,EAP2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,EASjC,CAACb,UAAD,CATiC,CAApC;;AAWA,MAAI,CAACF,WAAD,IAAgB,CAACE,UAArB,EAAiC;AAC/B,WAAO,KAAC,UAAD,KAAP;AACD;;AAED,SAYE,KAAC,aAAD,KAZF;AAcD","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { Text, View, SafeAreaView, Platform, StatusBar } from \"react-native\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\r\nimport AppLoading from \"expo-app-loading\";\r\nimport * as Font from \"expo-font\";\r\nimport { FONTS } from \"./app/constants/theme\";\r\nimport MainContainer from \"./app/screens/MainContainer\";\r\nimport * as SplashScreen from \"expo-splash-screen\";\r\n\r\nexport default function App() {\r\n  let [fontsLoaded, isFontsLoaded] = useState(false);\r\n  const [appIsReady, setAppIsReady] = useState(false);\r\n\r\n  async function loadFonts() {\r\n    await Font.loadAsync({\r\n      \"Poppins-Black\": require(\"./assets/fonts/Poppins-Black.ttf\"),\r\n      \"Poppins-BlackItalic\": require(\"./assets/fonts/Poppins-BlackItalic.ttf\"),\r\n      \"Poppins-Bold\": require(\"./assets/fonts/Poppins-Bold.ttf\"),\r\n      \"Poppins-BoldItalic\": require(\"./assets/fonts/Poppins-BoldItalic.ttf\"),\r\n      \"Poppins-ExtraBold\": require(\"./assets/fonts/Poppins-ExtraBold.ttf\"),\r\n      \"Poppins-ExtraBoldItalic\": require(\"./assets/fonts/Poppins-ExtraBoldItalic.ttf\"),\r\n      \"Poppins-ExtraLight\": require(\"./assets/fonts/Poppins-ExtraLight.ttf\"),\r\n      \"Poppins-ExtraLightItalic\": require(\"./assets/fonts/Poppins-ExtraLightItalic.ttf\"),\r\n      \"Poppins-Italic\": require(\"./assets/fonts/Poppins-Italic.ttf\"),\r\n      \"Poppins-Medium\": require(\"./assets/fonts/Poppins-Medium.ttf\"),\r\n      \"Poppins-MediumItalic\": require(\"./assets/fonts/Poppins-MediumItalic.ttf\"),\r\n      \"Poppins-Regular\": require(\"./assets/fonts/Poppins-Regular.ttf\"),\r\n      \"Poppins-SemiBold\": require(\"./assets/fonts/Poppins-SemiBold.ttf\"),\r\n      \"Poppins-SemiBoldItalic\": require(\"./assets/fonts/Poppins-SemiBoldItalic.ttf\"),\r\n    });\r\n    isFontsLoaded(true);\r\n  }\r\n  async function prepare() {\r\n    try {\r\n      // Keep the splash screen visible while we fetch resources\r\n      await SplashScreen.preventAutoHideAsync();\r\n      // Pre-load fonts, make any API calls you need to do here\r\n      // Artificially delay for two seconds to simulate a slow loading\r\n      // experience. Please remove this if you copy and paste the code!\r\n      await new Promise((resolve) => setTimeout(resolve, 2000));\r\n    } catch (e) {\r\n      console.warn(e);\r\n    } finally {\r\n      // Tell the application to render\r\n      setAppIsReady(true);\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    loadFonts();\r\n    prepare();\r\n  }, []);\r\n\r\n  const onLayoutRootView = useCallback(async () => {\r\n    if (appIsReady) {\r\n      // This tells the splash screen to hide immediately! If we call this after\r\n      // `setAppIsReady`, then we may see a blank screen while the app is\r\n      // loading its initial state and rendering its first pixels. So instead,\r\n      // we hide the splash screen once we know the root view has already\r\n      // performed layout.\r\n      await SplashScreen.hideAsync();\r\n    }\r\n  }, [appIsReady]);\r\n\r\n  if (!fontsLoaded || !appIsReady) {\r\n    return <AppLoading />;\r\n  }\r\n\r\n  return (\r\n    // <SafeAreaView\r\n    //   style={{\r\n    //     flex: 1,\r\n    //     paddingTop: Platform.OS === \"android\" ? StatusBar.currentHeight : 0,\r\n    //   }}\r\n    //   onLayout={onLayoutRootView}\r\n    // >\r\n    //   <Text style={{ fontFamily: \"Poppins-Regular\" }}>\r\n    //     SplashScreen Demo! 👋\r\n    //   </Text>\r\n    // </SafeAreaView>\r\n    <MainContainer />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}